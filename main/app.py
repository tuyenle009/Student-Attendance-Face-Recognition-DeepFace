import streamlit as st
import cv2
import os
import numpy as np
import pandas as pd
from datetime import datetime
from ultralytics import YOLO
from deepface import DeepFace
import tempfile
import time


# C√°c bi·∫øn ƒë∆∞·ªùng d·∫´n
MODEL_PATH = "../yolo-face/yolov11l-face.pt"
FACE_DATABASE = "main/face_images"
CSV_PATH = "main/attendance.csv"



# Configure the web page
st.set_page_config(page_title="Face Attendance System", layout="wide", initial_sidebar_state="expanded")

# Th√™m CSS ƒë·ªÉ l√†m ƒë·∫πp giao di·ªán
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 1.8rem;
        color: #0D47A1;
        margin-top: 1.5rem;
        margin-bottom: 1rem;
    }
    .status-success {
        padding: 0.5rem;
        background-color: #E8F5E9;
        border-left: 5px solid #4CAF50;
        margin: 1rem 0;
    }
    .status-warning {
        padding: 0.5rem;
        background-color: #FFF8E1;
        border-left: 5px solid #FFC107;
        margin: 1rem 0;
    }
    .status-error {
        padding: 0.5rem;
        background-color: #FFEBEE;
        border-left: 5px solid #F44336;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

st.markdown("<h1 class='main-header'>üì∑ Student Face Attendance System</h1>", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin phi√™n 
if 'recognized_students' not in st.session_state:
    st.session_state.recognized_students = []
if 'attendance_count' not in st.session_state:
    st.session_state.attendance_count = 0
if 'last_recognition_time' not in st.session_state:
    st.session_state.last_recognition_time = None
# Kh·ªüi t·∫°o dictionary ƒë·ªÉ l∆∞u tr·ªØ s·ªë phi·∫øu b·∫ßu cho m·ªói khu√¥n m·∫∑t
if 'face_votes' not in st.session_state:
    st.session_state.face_votes = {}



# Ki·ªÉm tra th∆∞ m·ª•c database khu√¥n m·∫∑t
if not os.path.exists(FACE_DATABASE):
    os.makedirs(FACE_DATABASE)
    st.warning(f"Face database directory created at {FACE_DATABASE}. Please add student face images.")

# Hi·ªÉn th·ªã tr·∫°ng th√°i loading khi t·∫£i m√¥ h√¨nh YOLO
with st.spinner("Loading YOLO face detection model..."):
    try:
        yolo_model = YOLO(MODEL_PATH)
        st.success("Model loaded successfully!")
    except Exception as e:
        st.error(f"Error loading model: {str(e)}")
        st.stop()

# Ki·ªÉm tra v√† t·∫°o CSV file n·∫øu ch∆∞a t·ªìn t·∫°i
if not os.path.exists(CSV_PATH):
    st.info("Creating new attendance file...")
    df = pd.DataFrame(columns=["StudentID"])
    df.to_csv(CSV_PATH, index=False)
    st.success("Attendance file created successfully!")
else:
    # ƒê·ªçc danh s√°ch sinh vi√™n v√† kh·ªüi t·∫°o ƒëi·ªÉm danh cho ng√†y hi·ªán t·∫°i
    df = pd.read_csv(CSV_PATH)
    today = datetime.now().strftime("%Y-%m-%d")
    
    # Th√™m c·ªôt ng√†y m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
    if today not in df.columns:
        # ƒê·∫∑t t·∫•t c·∫£ sinh vi√™n l√† 'Absent' (v·∫Øng m·∫∑t) ban ƒë·∫ßu
        df[today] = 'Absent'
        df.to_csv(CSV_PATH, index=False)
        st.sidebar.success(f"Initialized attendance for today: {today}")
    
    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ file ƒëi·ªÉm danh hi·ªán t·∫°i
    st.sidebar.info(f"Current attendance file has {len(df)} students and {len(df.columns)-1} attendance dates.")

# T·∫°o danh s√°ch sinh vi√™n c√≥ trong file ƒë·ªÉ ki·ªÉm tra
VALID_STUDENT_IDS = []
if os.path.exists(CSV_PATH):
    student_df = pd.read_csv(CSV_PATH)
    VALID_STUDENT_IDS = student_df['StudentID'].unique().tolist()


# Function to detect faces with YOLO
def detect_faces(frame):
    results = yolo_model(frame, verbose=False)
    faces, bboxes = [], []
    for result in results:
        for box in result.boxes.xyxy:
            x1, y1, x2, y2 = map(int, box)
            face = frame[y1:y2, x1:x2]
            if face.shape[0] > 0 and face.shape[1] > 0:
                faces.append(face)
                bboxes.append((x1, y1, x2, y2))
    return faces, bboxes

# Function to recognize face with DeepFace
def recognize_face(face):
    try:
        distance_threshold=0.3
        result = DeepFace.find(
            img_path=face, 
            db_path=FACE_DATABASE, 
            model_name="Facenet512",
            enforce_detection=False, 
            align=True, 
            distance_metric="cosine", 
            silent=True,
            normalization="Facenet2018",
            detector_backend="skip",
            threshold=distance_threshold,
        )
        # if len(result) > 0:  # Ki·ªÉm tra danh s√°ch kh√¥ng r·ªóng
        #     df = result[0]  # L·∫•y DataFrame ƒë·∫ßu ti√™n trong danh s√°ch
        #     if "identity" in df.columns:  # Ki·ªÉm tra c·ªôt "identity" c√≥ t·ªìn t·∫°i kh√¥ng
        #         identities = df["identity"].tolist()  # L·∫•y danh s√°ch gi√° tr·ªã c·ªßa c·ªôt "identity"
        #         print(identities)
        #     else:
        print(result)
        print("_____________________________")

        if result and len(result) > 0 and not result[0]['distance'].empty:
            # L·∫•y k·∫øt qu·∫£ c√≥ kho·∫£ng c√°ch g·∫ßn nh·∫•t
            min_distance_idx = result[0]['distance'].idxmin()
            identity_path = result[0]['identity'][min_distance_idx]
            distance = result[0]['distance'][min_distance_idx]
            
            # Ch·ªâ ch·∫•p nh·∫≠n khu√¥n m·∫∑t c√≥ kho·∫£ng c√°ch d∆∞·ªõi ng∆∞·ª°ng
            if distance < recognition_threshold:  # S·ª≠ d·ª•ng ng∆∞·ª°ng t·ª´ settings
                # T√°ch m√£ sinh vi√™n t·ª´ t√™n th∆∞ m·ª•c
                folder_name = identity_path.split(os.sep)[-2]  # L·∫•y t√™n th∆∞ m·ª•c
                student_id = int(folder_name.split("_")[0])  # L·∫•y ph·∫ßn tr∆∞·ªõc d·∫•u g·∫°ch d∆∞·ªõi
                
                # Ki·ªÉm tra xem ID sinh vi√™n c√≥ h·ª£p l·ªá kh√¥ng (c√≥ trong danh s√°ch)
                
                if int(student_id) in VALID_STUDENT_IDS:
                    st.sidebar.info(f"Face recognized: {student_id}, Distance: {distance:.4f}")
                    return student_id, distance
                else:
                    st.sidebar.warning(f"ID {student_id} found in face database but not in attendance list!")
                    return "Unknown", distance
            else:
                return "Unknown", distance
        return "Unknown", 1.0
    except Exception as e:
        st.error(f"Error during face recognition: {str(e)}")
        return "Error", 1.0

# Function to mark attendance
def mark_attendance(student_id):
    if student_id == "Unknown" or student_id == "Error":
        return False
    
    try:
        df = pd.read_csv(CSV_PATH, encoding='ISO-8859-1')
        today = datetime.now().strftime("%Y-%m-%d")
        
        # Th√™m c·ªôt ng√†y m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
        if today not in df.columns:
            # ƒê·∫∑t t·∫•t c·∫£ sinh vi√™n l√† 'Absent' (v·∫Øng m·∫∑t) ban ƒë·∫ßu
            df[today] = 'Absent'
            df.to_csv(CSV_PATH, index=False)
            st.sidebar.success(f"Kh·ªüi t·∫°o c·ªôt ƒëi·ªÉm danh m·ªõi cho ng√†y: {today}")
        
        # Ki·ªÉm tra sinh vi√™n c√≥ trong danh s√°ch
        if student_id in df['StudentID'].values:
            # ƒê√°nh d·∫•u sinh vi√™n c√≥ m·∫∑t
            if df.loc[df['StudentID'] == student_id, today].values[0] != 'Present':
                df.loc[df['StudentID'] == student_id, today] = 'Present'
                # L∆∞u l·∫°i file CSV
                df.to_csv(CSV_PATH, index=False)
                st.sidebar.success(f"Marked student {student_id} as present")
                return True
            return False  # Kh√¥ng ƒëi·ªÉm danh l·∫°i n·∫øu ƒë√£ c√≥ m·∫∑t
        else:
            # N·∫øu sinh vi√™n kh√¥ng c√≥ trong danh s√°ch, hi·ªÉn th·ªã c·∫£nh b√°o
            st.sidebar.warning(f"Student {student_id} not in attendance list. Cannot mark attendance.")
            return False
            
    except Exception as e:
        st.error(f"Error marking attendance: {str(e)}")
        return False

# Th√™m thanh sidebar cho c√°c tu·ª≥ ch·ªçn
st.sidebar.markdown("## Attendance Options")
option = st.sidebar.radio("Select attendance method", ["Camera", "Upload Video"])

# Tu·ª≥ ch·ªçn c√†i ƒë·∫∑t hi·ªÉn th·ªã trong thanh sidebar
with st.sidebar.expander("Advanced Settings"):
    recognition_threshold = st.slider("Recognition Threshold", 0.1, 0.5, 0.3, 0.01, 
                                   help="Lower values are more strict, higher values are more permissive")
    camera_duration = st.slider("Camera Capture Duration (seconds)", 1, 10, 3, 
                             help="How long to capture from camera for attendance")
    # Th√™m slider cho s·ªë phi·∫øu c·∫ßn thi·∫øt
    votes_required = st.slider("Recognition Votes Required", 1, 10, 3,
                            help="Number of times a face must be recognized before marking attendance")
    show_confidence = st.checkbox("Show Confidence Score", value=True)

# Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒëi·ªÉm danh trong sidebar
if st.session_state.recognized_students:
    st.sidebar.markdown("### Recent Attendance")
    for student in st.session_state.recognized_students[-5:]:  # Show last 5 students
        st.sidebar.markdown(f"- {student['id']} at {student['time']}")

# Camera Option
if option == "Camera":
    st.markdown("<h2 class='sub-header'>Use Camera for Attendance</h2>", unsafe_allow_html=True)
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # T·∫°o placeholder cho camera feed
        camera_placeholder = st.empty()
        status_placeholder = st.empty()
    
    with col2:
        st.markdown("### Instructions")
        st.markdown("""
        1. Click 'Start Attendance' to begin
        2. Position your face in the camera
        3. Hold still for a moment
        4. System will automatically mark attendance
        """)
        
        # Button to start attendance
        if st.button("Start Attendance", key="camera_start"):
            # Reset b·ªô ƒë·∫øm phi·∫øu b·∫ßu khi b·∫Øt ƒë·∫ßu phi√™n m·ªõi
            st.session_state.face_votes = {}
            
            # ƒê·∫£m b·∫£o ng√†y h√¥m nay ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o trong CSV
            today = datetime.now().strftime("%Y-%m-%d")
            df = pd.read_csv(CSV_PATH)
            if today not in df.columns:
                df[today] = 'Absent'  # M·∫∑c ƒë·ªãnh t·∫•t c·∫£ sinh vi√™n v·∫Øng m·∫∑t
                df.to_csv(CSV_PATH, index=False)
                st.success(f"Initialized attendance for today: {today}")
            
            # C·∫≠p nh·∫≠t l·∫°i danh s√°ch ID sinh vi√™n h·ª£p l·ªá
            VALID_STUDENT_IDS = df['StudentID'].unique().tolist()
            
            cap = cv2.VideoCapture(0)
            
            if not cap.isOpened():
                st.error("Could not open camera. Please check your camera connection.")
            else:
                with st.spinner("Initializing camera..."):
                    ret, frame = cap.read()  # Warm up camera
                
                # Set up progress bar
                progress_bar = st.progress(0)
                status_placeholder.markdown("<div class='status-warning'>Capturing...</div>", unsafe_allow_html=True)
                
                # Capture for specified duration
                start_time = time.time()
                recognized_faces = set()  # ƒê·ªÉ tr√°nh ƒëi·ªÉm danh tr√πng l·∫∑p
                
                while time.time() - start_time < camera_duration:
                    # Update progress bar
                    elapsed = time.time() - start_time
                    progress = min(1.0, elapsed / camera_duration)
                    progress_bar.progress(progress)
                    
                    ret, frame = cap.read()
                    if not ret:
                        status_placeholder.markdown("<div class='status-error'>Error reading from camera</div>", unsafe_allow_html=True)
                        break
                    
                    # Detect and recognize faces
                    faces, bboxes = detect_faces(frame)
                    
                    for face, (x1, y1, x2, y2) in zip(faces, bboxes):
                        student_id, confidence = recognize_face(face)
                        confidence_text = f" ({1-confidence:.2f})" if show_confidence else ""
                        
                        # V·∫Ω khung v√† th√¥ng tin
                        if student_id != "Unknown" and student_id != "Error":
                            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                            
                            # C·∫≠p nh·∫≠t s·ªë phi·∫øu cho ID n√†y
                            if student_id in st.session_state.face_votes:
                                st.session_state.face_votes[student_id] += 1
                            else:
                                st.session_state.face_votes[student_id] = 1
                            
                            # L·∫•y s·ªë phi·∫øu hi·ªán t·∫°i
                            current_votes = st.session_state.face_votes[student_id]
                            
                            # Hi·ªÉn th·ªã th√¥ng tin khu√¥n m·∫∑t c√πng v·ªõi s·ªë phi·∫øu
                            cv2.putText(frame, f"ID: {student_id}{confidence_text} Votes: {current_votes}/{votes_required}", 
                                       (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                            
                            # Ch·ªâ ƒë√°nh d·∫•u ƒëi·ªÉm danh khi ƒë·ªß s·ªë phi·∫øu c·∫ßn thi·∫øt
                            if current_votes >= votes_required and student_id not in recognized_faces:
                                if mark_attendance(student_id):
                                    recognized_faces.add(student_id)
                                    st.session_state.attendance_count += 1
                                    current_time = datetime.now().strftime("%H:%M:%S")
                                    st.session_state.last_recognition_time = current_time
                                    st.session_state.recognized_students.append({
                                        'id': student_id,
                                        'time': current_time,
                                        'confidence': 1-confidence,
                                        'votes': current_votes
                                    })
                        else:
                            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 2)
                            cv2.putText(frame, f"Unknown{confidence_text}", 
                                       (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)
                    
                    # Hi·ªÉn th·ªã frame
                    camera_placeholder.image(frame, channels="BGR", use_container_width=True)
                
                # Ho√†n th√†nh qu√° tr√¨nh
                progress_bar.progress(1.0)
                cap.release()
                
                if len(recognized_faces) > 0:
                    status_placeholder.markdown("<div class='status-success'>Attendance completed successfully!</div>", unsafe_allow_html=True)
                else:
                    status_placeholder.markdown("<div class='status-warning'>No students recognized. Try again.</div>", unsafe_allow_html=True)
                
                st.write(f"Recognized {len(recognized_faces)} students in this session.")

# Upload Video Option
elif option == "Upload Video":
    st.markdown("<h2 class='sub-header'>Upload Video for Attendance</h2>", unsafe_allow_html=True)
    
    # File uploader
    uploaded_file = st.file_uploader("Upload a Video", type=["mp4", "avi", "mov"])
    
    if uploaded_file:
        # Save uploaded file to temp location
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_file:
            temp_file.write(uploaded_file.read())
            video_path = temp_file.name
        
        # Video processing controls
        col1, col2 = st.columns([3, 1])
        with col2:
            st.markdown("### Video Controls")
            process_video = st.button("Process Video")
            stop_processing = st.button("Stop Processing")
        
        with col1:
            # Create placeholders
            video_placeholder = st.empty()
            status_placeholder = st.empty()
            progress_placeholder = st.empty()
        
        if process_video:
            # Reset b·ªô ƒë·∫øm phi·∫øu b·∫ßu khi b·∫Øt ƒë·∫ßu phi√™n m·ªõi
            st.session_state.face_votes = {}
            
            # C·∫≠p nh·∫≠t l·∫°i danh s√°ch ID sinh vi√™n h·ª£p l·ªá
            if os.path.exists(CSV_PATH):
                student_df = pd.read_csv(CSV_PATH)
                VALID_STUDENT_IDS = student_df['StudentID'].unique().tolist()
            
            cap = cv2.VideoCapture(video_path)
            if not cap.isOpened():
                st.error("Error opening video file")
            else:
                # Get video details
                total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
                fps = cap.get(cv2.CAP_PROP_FPS)
                duration = total_frames / fps if fps > 0 else 0
                
                status_placeholder.markdown("<div class='status-warning'>Processing video...</div>", unsafe_allow_html=True)
                progress_bar = progress_placeholder.progress(0)
                
                frame_count = 0
                processing = True
                recognized_faces = set()  # ƒê·ªÉ tr√°nh ƒëi·ªÉm danh tr√πng l·∫∑p
                
                # Process every 5th frame to speed up
                frame_step = 5
                
                while processing and cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    
                    frame_count += 1
                    # Only process every frame_step frames
                    if frame_count % frame_step != 0:
                        continue
                    
                    # Check if stop button pressed
                    if stop_processing:
                        processing = False
                        status_placeholder.markdown("<div class='status-warning'>Processing stopped by user</div>", unsafe_allow_html=True)
                        break
                    
                    # Update progress
                    if total_frames > 0:
                        progress = min(1.0, frame_count / total_frames)
                        progress_bar.progress(progress)
                    
                    # Process frame
                    faces, bboxes = detect_faces(frame)
                    for face, (x1, y1, x2, y2) in zip(faces, bboxes):
                        student_id, confidence = recognize_face(face)
                        confidence_text = f" ({1-confidence:.2f})" if show_confidence else ""
                        
                        if student_id != "Unknown" and student_id != "Error":
                            color = (0, 255, 0)  # Green for recognized
                            
                            # C·∫≠p nh·∫≠t s·ªë phi·∫øu cho ID n√†y
                            if student_id in st.session_state.face_votes:
                                st.session_state.face_votes[student_id] += 1
                            else:
                                st.session_state.face_votes[student_id] = 1
                            
                            # L·∫•y s·ªë phi·∫øu hi·ªán t·∫°i
                            current_votes = st.session_state.face_votes[student_id]
                            
                            # Ch·ªâ ƒë√°nh d·∫•u ƒëi·ªÉm danh khi ƒë·ªß s·ªë phi·∫øu c·∫ßn thi·∫øt
                            if current_votes >= votes_required and student_id not in recognized_faces:
                                if mark_attendance(student_id):
                                    recognized_faces.add(student_id)
                                    current_time = datetime.now().strftime("%H:%M:%S")
                                    st.session_state.recognized_students.append({
                                        'id': student_id,
                                        'time': current_time,
                                        'confidence': 1-confidence,
                                        'votes': current_votes
                                    })
                        else:
                            color = (0, 0, 255)  # Red for unknown
                        
                        # Draw box and label
                        cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
                        cv2.putText(frame, f"{student_id}{confidence_text}", 
                                   (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                    
                    # Display the frame
                    video_placeholder.image(frame, channels="BGR", use_container_width=True)
                
                # Clean up
                cap.release()
                progress_bar.progress(1.0)
                
                if len(recognized_faces) > 0:
                    status_placeholder.markdown("<div class='status-success'>Video processing completed!</div>", unsafe_allow_html=True)
                    st.write(f"Recognized {len(recognized_faces)} students from video.")
                else:
                    status_placeholder.markdown("<div class='status-warning'>No students recognized in the video.</div>", unsafe_allow_html=True)
                
                # Clean up temp file
                try:
                    os.unlink(video_path)
                except:
                    pass

# Attendance Results Section
st.markdown("<h2 class='sub-header'>Attendance Results</h2>", unsafe_allow_html=True)

# Tabs for different views
tab1, tab2, tab3 = st.tabs(["Today's Attendance", "Full Attendance Record", "Manual Attendance"])

with tab1:
    if os.path.exists(CSV_PATH):
        df = pd.read_csv(CSV_PATH)
        today = datetime.now().strftime("%Y-%m-%d")
        
        if today in df.columns:
            # Filter to show only present students today
            present_today = df[df[today] == 'Present']
            absent_today = df[df[today] == 'Absent']
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Present Students", len(present_today))
            with col2:
                st.metric("Absent Students", len(absent_today))
            
            if not present_today.empty:
                st.write("### Students Present Today")
                st.dataframe(present_today[['StudentID', today]], width=400)
            else:
                st.info("No students marked present today.")
        else:
            st.info(f"No attendance record for today ({today}) yet.")

with tab2:
    if os.path.exists(CSV_PATH):
        df = pd.read_csv(CSV_PATH)
        
        # Add options to filter data
        st.write("### Full Attendance Record")
        
        # Date filter if there are dates in the dataset
        date_columns = [col for col in df.columns if col != 'StudentID']
        if date_columns:
            selected_dates = st.multiselect("Select dates to view:", date_columns, default=date_columns[-1:])
            
            if selected_dates:
                filtered_df = df[['StudentID'] + selected_dates]
                st.dataframe(filtered_df)
                
                # Download button for CSV
                csv = filtered_df.to_csv(index=False)
                st.download_button(
                    label="Download Attendance Data",
                    data=csv,
                    file_name="attendance_export.csv",
                    mime="text/csv"
                )
            else:
                st.info("Please select at least one date to view.")
        else:
            st.info("No attendance dates found in the record.")
    else:
        st.error("Attendance file not found.")

with tab3:
    st.write("### Manual Attendance")
    st.write("Use this section to manually edit student attendance status for today.")
    
    if os.path.exists(CSV_PATH):
        df = pd.read_csv(CSV_PATH)
        today = datetime.now().strftime("%Y-%m-%d")
        
        # ƒê·∫£m b·∫£o c·ªôt ng√†y h√¥m nay t·ªìn t·∫°i
        if today not in df.columns:
            df[today] = 'Absent'
            df.to_csv(CSV_PATH, index=False)
            st.success(f"Initialized attendance column for today: {today}")
        
        # Hi·ªÉn th·ªã th·ªëng k√™
        present_count = len(df[df[today] == 'Present'])
        absent_count = len(df[df[today] == 'Absent'])
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total Students", len(df))
        with col2:
            st.metric("Present", present_count, f"{present_count/len(df)*100:.1f}%")
        with col3:
            st.metric("Absent", absent_count, f"{absent_count/len(df)*100:.1f}%")
        
        # Th√™m t√≠nh nƒÉng t√¨m ki·∫øm sinh vi√™n
        search_query = st.text_input("üîç Search student by ID:", "")
        
        # T·∫°o 2 tab cho 2 c√°ch ch·ªânh s·ª≠a kh√°c nhau
        edit_tab1, edit_tab2 = st.tabs(["Individual Editing", "Batch Selection"])
        
        with edit_tab1:
            st.write("Edit attendance status for individual students:")
            
            # L·ªçc sinh vi√™n d·ª±a tr√™n t·ª´ kh√≥a t√¨m ki·∫øm
            filtered_df = df
            if search_query:
                filtered_df = df[df['StudentID'].str.contains(search_query, case=False)]
            
            if filtered_df.empty:
                st.warning("No students match your search criteria.")
            else:
                # Hi·ªÉn th·ªã t·ª´ng sinh vi√™n v·ªõi n√∫t chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i
                for index, row in filtered_df.iterrows():
                    student_id = row['StudentID']
                    current_status = row[today]
                    
                    col1, col2, col3 = st.columns([3, 2, 1])
                    
                    with col1:
                        st.write(f"**{student_id}**")
                    
                    with col2:
                        status_color = "green" if current_status == "Present" else "red"
                        st.markdown(f"<span style='color:{status_color};font-weight:bold'>{current_status}</span>", unsafe_allow_html=True)
                    
                    with col3:
                        # N√∫t ƒë·ªÉ chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i
                        new_status = "Absent" if current_status == "Present" else "Present"
                        button_label = f"Mark as {new_status}" 
                        
                        if st.button(button_label, key=f"toggle_{student_id}"):
                            df.loc[index, today] = new_status
                            df.to_csv(CSV_PATH, index=False)
                            st.success(f"Updated {student_id} to {new_status}")
                            st.rerun()
                    
                    st.markdown("---")
        
        with edit_tab2:
            st.write("Select multiple students to mark as present:")
            
            # T·∫°o danh s√°ch sinh vi√™n ƒë·ªÉ l·ª±a ch·ªçn
            student_ids = df['StudentID'].tolist()
            
            # M·∫∑c ƒë·ªãnh ch·ªçn nh·ªØng sinh vi√™n ƒë√£ c√≥ m·∫∑t
            selected_students = st.multiselect(
                "Select students to mark as present:",
                student_ids,
                default=[sid for sid in student_ids if df.loc[df['StudentID'] == sid, today].values[0] == 'Present']
            )
            
            if st.button("Update Attendance", key="batch_update"):
                # ƒê√°nh d·∫•u t·∫•t c·∫£ l√† v·∫Øng m·∫∑t tr∆∞·ªõc
                df[today] = 'Absent'
                
                # ƒê√°nh d·∫•u nh·ªØng sinh vi√™n ƒë∆∞·ª£c ch·ªçn l√† c√≥ m·∫∑t
                for student_id in selected_students:
                    df.loc[df['StudentID'] == student_id, today] = 'Present'
                
                # L∆∞u l·∫°i file CSV
                df.to_csv(CSV_PATH, index=False)
                st.success(f"Updated attendance for all students. {len(selected_students)} marked as present!")
                
                # C·∫≠p nh·∫≠t l·∫°i hi·ªÉn th·ªã
                st.rerun()
    else:
        st.error("Attendance file not found.")

# Footer
st.markdown("---")
st.markdown("Developed with ‚ù§Ô∏è for student attendance management")
